/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface EscrowInterface extends utils.Interface {
  functions: {
    "cancelOffer(uint256)": FunctionFragment;
    "getOffer(uint256)": FunctionFragment;
    "getOffer(uint256,address)": FunctionFragment;
    "offerPerUser(address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "verifyOfferIntegrity(address,uint256,uint256,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelOffer"
      | "getOffer(uint256)"
      | "getOffer(uint256,address)"
      | "offerPerUser"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "supportsInterface"
      | "verifyOfferIntegrity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "offerPerUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyOfferIntegrity",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOffer(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOffer(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyOfferIntegrity",
    data: BytesLike
  ): Result;

  events: {
    "ClaimToken(address,uint8,uint256)": EventFragment;
    "FinishOffer(address,uint256)": EventFragment;
    "NewOffer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinishOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOffer"): EventFragment;
}

export interface ClaimTokenEventObject {
  claimOwner: string;
  toStatus: number;
  offerId: BigNumber;
}
export type ClaimTokenEvent = TypedEvent<
  [string, number, BigNumber],
  ClaimTokenEventObject
>;

export type ClaimTokenEventFilter = TypedEventFilter<ClaimTokenEvent>;

export interface FinishOfferEventObject {
  executor: string;
  offerId: BigNumber;
}
export type FinishOfferEvent = TypedEvent<
  [string, BigNumber],
  FinishOfferEventObject
>;

export type FinishOfferEventFilter = TypedEventFilter<FinishOfferEvent>;

export interface NewOfferEventObject {
  creator: string;
  executor: string;
  offerId: BigNumber;
}
export type NewOfferEvent = TypedEvent<
  [string, string, BigNumber],
  NewOfferEventObject
>;

export type NewOfferEventFilter = TypedEventFilter<NewOfferEvent>;

export interface Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelOffer(
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getOffer(uint256)"(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, number, string]>;

    "getOffer(uint256,address)"(
      offerId: BigNumberish,
      userWallet: string,
      overrides?: CallOverrides
    ): Promise<[string[], string[], number[]]>;

    offerPerUser(u: string, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyOfferIntegrity(
      tokenAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      tokenType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  cancelOffer(
    offerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getOffer(uint256)"(
    offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, number, string]>;

  "getOffer(uint256,address)"(
    offerId: BigNumberish,
    userWallet: string,
    overrides?: CallOverrides
  ): Promise<[string[], string[], number[]]>;

  offerPerUser(u: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyOfferIntegrity(
    tokenAddress: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    tokenType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    cancelOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getOffer(uint256)"(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, number, string]>;

    "getOffer(uint256,address)"(
      offerId: BigNumberish,
      userWallet: string,
      overrides?: CallOverrides
    ): Promise<[string[], string[], number[]]>;

    offerPerUser(u: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyOfferIntegrity(
      tokenAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      tokenType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ClaimToken(address,uint8,uint256)"(
      claimOwner?: string | null,
      toStatus?: null,
      offerId?: null
    ): ClaimTokenEventFilter;
    ClaimToken(
      claimOwner?: string | null,
      toStatus?: null,
      offerId?: null
    ): ClaimTokenEventFilter;

    "FinishOffer(address,uint256)"(
      executor?: string | null,
      offerId?: null
    ): FinishOfferEventFilter;
    FinishOffer(
      executor?: string | null,
      offerId?: null
    ): FinishOfferEventFilter;

    "NewOffer(address,address,uint256)"(
      creator?: string | null,
      executor?: string | null,
      offerId?: null
    ): NewOfferEventFilter;
    NewOffer(
      creator?: string | null,
      executor?: string | null,
      offerId?: null
    ): NewOfferEventFilter;
  };

  estimateGas: {
    cancelOffer(
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getOffer(uint256)"(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOffer(uint256,address)"(
      offerId: BigNumberish,
      userWallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerPerUser(u: string, overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyOfferIntegrity(
      tokenAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      tokenType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOffer(
      offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getOffer(uint256)"(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOffer(uint256,address)"(
      offerId: BigNumberish,
      userWallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerPerUser(
      u: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyOfferIntegrity(
      tokenAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      tokenType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
