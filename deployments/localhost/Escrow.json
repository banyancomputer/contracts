{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "UNAUTHORIZED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Escrow.OfferStatus",
          "name": "toStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "ClaimToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "FinishOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "NewOffer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "cancelOffer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "getOffer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userWallet",
          "type": "address"
        }
      ],
      "name": "getOffer",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "u",
          "type": "address"
        }
      ],
      "name": "offerPerUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "creatorTokenAddress",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "creatorTokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "creatorAmount",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "creatorTokenType",
          "type": "uint8[]"
        },
        {
          "internalType": "address",
          "name": "executerAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "executorTokenAddress",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "executorTokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "executorAmount",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "executorTokenType",
          "type": "uint8[]"
        }
      ],
      "name": "startOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenType",
          "type": "uint8"
        }
      ],
      "name": "verifyOfferIntegrity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe899925cd41fa7c67d6a6f8fea4c4b8d3e6c105daee2500b1793801146096f50",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "2160618",
    "logsBloom": "0x
    "blockHash": "0xa6c66f5ac1e26ad46bb7278e64f535ae63a6d558fad9db8f5429a460772e145f",
    "transactionHash": "0xe899925cd41fa7c67d6a6f8fea4c4b8d3e6c105daee2500b1793801146096f50",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0xe899925cd41fa7c67d6a6f8fea4c4b8d3e6c105daee2500b1793801146096f50",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad"
        ],
        "data": "0x000000000000000000000000e7f1725e7734ce288f8367e1bb143e90bb3f0512",
        "logIndex": 0,
        "blockHash": "0xa6c66f5ac1e26ad46bb7278e64f535ae63a6d558fad9db8f5429a460772e145f"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "2160618",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "numDeployments": 1,
  "solcInputHash": "3801823db14949aeae2a10aa0f842d1a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Escrow.OfferStatus\",\"name\":\"toStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"ClaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"FinishOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"NewOffer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"getOffer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userWallet\",\"type\":\"address\"}],\"name\":\"getOffer\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"}],\"name\":\"offerPerUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"creatorTokenAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"creatorTokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"creatorAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"creatorTokenType\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"executerAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"executorTokenAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"executorTokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"executorAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"executorTokenType\",\"type\":\"uint8[]\"}],\"name\":\"startOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"verifyOfferIntegrity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Escrow.sol\":\"Escrow\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x74216d303b87202736b6d571fc3e9b530aa98ff017a41516170f1c555e518669\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >= 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\n\\r\\ncontract Escrow is Context, ERC1155Holder, ERC721Holder, AccessControlled\\r\\n{\\r\\n    event NewOffer(address indexed creator, address indexed executor, uint256 offerId);\\r\\n    event FinishOffer( address indexed executor, uint256 offerId);\\r\\n    event ClaimToken(address indexed claimOwner, OfferStatus toStatus,  uint256 offerId);\\r\\n\\r\\n    uint256 private _offerId;\\r\\n    string private _symbol;\\r\\n    mapping(uint256 => Offer) internal _transactions;\\r\\n    mapping(address => uint256[]) internal _openOffers;\\r\\n\\r\\n    uint256 private _openOfferAcc;\\r\\n    uint256 private _totalOfferCompletedAcc;\\r\\n    uint256 private _totalOfferClaimAcc;\\r\\n\\r\\n    enum OfferStatus { NON, OFFER_CREATED, OFFER_COMPLETED, OFFER_CANCELLED  }\\r\\n    enum UserStatus  { NON, OPEN, DEPOSIT, CLAIM }\\r\\n    enum OfferType   { NON, ERC20, ERC1155, ERC721, NATIVE }\\r\\n\\r\\n    struct OfferCounterpart {\\r\\n        address contractAddr;\\r\\n        bytes32 proof;\\r\\n        uint256 idAsset;\\r\\n        uint256 amount;\\r\\n        OfferType offerorType;\\r\\n        UserStatus offerorStatus;\\r\\n    }\\r\\n    struct Offer {\\r\\n        address creator;\\r\\n        address executor;\\r\\n        uint256 id;\\r\\n        mapping(address => OfferUser) _offerors;\\r\\n        string file;\\r\\n        string description;\\r\\n        OfferStatus offerStatus;\\r\\n    }\\r\\n    struct OfferUser \\r\\n    {\\r\\n         uint256[] tokenAddressIdx;\\r\\n         mapping(uint256 => OfferCounterpart ) _counterpart;\\r\\n    }\\r\\n    constructor(address _authority) AccessControlled(IAuthority(_authority))\\r\\n    {\\r\\n        require(_authority != address(0));\\r\\n        _openOfferAcc = 0;\\r\\n        _totalOfferCompletedAcc = 0;\\r\\n        _totalOfferClaimAcc = 0;\\r\\n        _offerId = 0;\\r\\n    }\\r\\n\\r\\n     function startOffer( address[] memory creatorTokenAddress, uint256[] memory creatorTokenId, uint256[] memory creatorAmount, uint8[]  memory creatorTokenType,\\r\\n                         address  executerAddress , address[] memory executorTokenAddress, uint256[] memory executorTokenId, uint256[] memory executorAmount, uint8[] memory executorTokenType  ) public returns(uint256)\\r\\n    {\\r\\n        require(executerAddress != address(0), 'EXECUTER_ADDRESS_NOT_VALID' );\\r\\n        require(creatorTokenAddress.length == creatorTokenId.length && creatorTokenAddress.length ==  creatorAmount.length \\r\\n                 && creatorTokenAddress.length == creatorTokenType.length , 'CREATOR_PARMS_LEN_ERROR');\\r\\n        require(executorTokenAddress.length == executorTokenId.length && executorTokenAddress.length ==  executorAmount.length \\r\\n                 && executorTokenAddress.length == executorTokenType.length , 'EXECUTER_PARMS_LEN_ERROR');\\r\\n\\r\\n        _offerId++;\\r\\n        _transactions[_offerId].id = _offerId;\\r\\n        _transactions[_offerId].creator = msg.sender;\\r\\n        _transactions[_offerId].executor = executerAddress;\\r\\n        for (uint256 i = 0; i < creatorTokenAddress.length; i++) \\r\\n        {\\r\\n            verifyOfferIntegrity(creatorTokenAddress[i], creatorTokenId[i], creatorAmount[i], creatorTokenType[i] );\\r\\n            if(OfferType(creatorTokenType[i]) == OfferType.ERC20){\\r\\n                verifyERC20(msg.sender, creatorTokenAddress[i], creatorAmount[i]);\\r\\n            }else if(OfferType(creatorTokenType[i]) == OfferType.ERC721){\\r\\n                verifyERC721(msg.sender, creatorTokenAddress[i], creatorTokenId[i]);\\r\\n            }else if(OfferType(creatorTokenType[i]) == OfferType.ERC1155){\\r\\n                verifyERC1155(msg.sender, creatorTokenAddress[i], creatorAmount[i], creatorTokenId[i]);\\r\\n            }\\r\\n            _transactions[_offerId]._offerors[msg.sender].tokenAddressIdx.push(i+1);\\r\\n            _transactions[_offerId]._offerors[msg.sender]._counterpart[i+1].contractAddr = creatorTokenAddress[i];\\r\\n            _transactions[_offerId]._offerors[msg.sender]._counterpart[i+1].idAsset = creatorTokenId[i];\\r\\n            _transactions[_offerId]._offerors[msg.sender]._counterpart[i+1].amount  = creatorAmount[i];\\r\\n            _transactions[_offerId]._offerors[msg.sender]._counterpart[i+1].offerorType = OfferType(creatorTokenType[i]);\\r\\n            _transactions[_offerId]._offerors[msg.sender]._counterpart[i+1].offerorStatus = UserStatus.OPEN;\\r\\n        }\\r\\n        for (uint i = 0; i < executorTokenAddress.length; i++) \\r\\n        {\\r\\n            verifyOfferIntegrity(executorTokenAddress[i], executorTokenId[i], executorAmount[i], executorTokenType[i] );\\r\\n            if(OfferType(executorTokenType[i]) == OfferType.ERC20){\\r\\n                verifyERC20(executerAddress, executorTokenAddress[i], executorAmount[i]);\\r\\n            }else if(OfferType(executorTokenType[i]) == OfferType.ERC721){\\r\\n                verifyERC721(executerAddress, executorTokenAddress[i], executorTokenId[i]);\\r\\n            }else if(OfferType(executorTokenType[i]) == OfferType.ERC1155){\\r\\n                verifyERC1155(executerAddress, executorTokenAddress[i], executorAmount[i], executorTokenId[i]);\\r\\n            }\\r\\n            _transactions[_offerId]._offerors[executerAddress].tokenAddressIdx.push(i+1);\\r\\n            _transactions[_offerId]._offerors[executerAddress]._counterpart[i+1].contractAddr = executorTokenAddress[i];\\r\\n            _transactions[_offerId]._offerors[executerAddress]._counterpart[i+1].idAsset = executorTokenId[i];\\r\\n            _transactions[_offerId]._offerors[executerAddress]._counterpart[i+1].amount  = executorAmount[i];\\r\\n            _transactions[_offerId]._offerors[executerAddress]._counterpart[i+1].offerorType = OfferType(executorTokenType[i]);\\r\\n            _transactions[_offerId]._offerors[executerAddress]._counterpart[i+1].offerorStatus = UserStatus.OPEN;\\r\\n        }\\r\\n        _transactions[_offerId].offerStatus = OfferStatus.OFFER_CREATED;\\r\\n        _openOffers[msg.sender].push(_offerId);\\r\\n        _openOffers[executerAddress].push(_offerId);\\r\\n        emit NewOffer(msg.sender, executerAddress, _offerId );\\r\\n        return _offerId;\\r\\n    }\\r\\n\\r\\n    function cancelOffer(uint256 offerId) public  returns (bool)\\r\\n    {\\r\\n        Offer storage store = _transactions[offerId];\\r\\n        require(store.offerStatus == OfferStatus.OFFER_CREATED, 'ERROR: OFFER_STATUS ISNT CREATED');\\r\\n        require(store.executor == msg.sender || store.creator == msg.sender , 'ERROR: EXECUTER ISNT CREATOR OR EXECUTER');\\r\\n        _transactions[offerId].offerStatus = OfferStatus.OFFER_CANCELLED;\\r\\n        return true;\\r\\n    }\\r\\n    function getOffer(uint256 offerId) public view returns (address, address, uint8, string memory)\\r\\n    {\\r\\n        Offer storage store = _transactions[offerId];\\r\\n        return (store.creator, store.executor, uint8(store.offerStatus), store.file);\\r\\n    }\\r\\n    function getOffer(uint256 offerId, address userWallet) public view returns (address[] memory, bytes32[] memory, uint8[] memory )\\r\\n    {\\r\\n        Offer storage store = _transactions[offerId];\\r\\n        uint256[] memory tokenAddressIdx = store._offerors[userWallet].tokenAddressIdx;\\r\\n\\r\\n        address[]  memory _offerTokenAddress = new address[](tokenAddressIdx.length);\\r\\n        bytes32[]  memory _offerProof        = new bytes32[](tokenAddressIdx.length);\\r\\n        uint8[]    memory _offerType         = new uint8[](tokenAddressIdx.length);\\r\\n\\r\\n        for(uint y = 0; y < tokenAddressIdx.length; y++){\\r\\n                OfferCounterpart memory tInfo = store._offerors[userWallet]._counterpart[tokenAddressIdx[y]];\\r\\n                _offerTokenAddress[y]= msg.sender;\\r\\n                _offerProof[y] = tInfo.proof;\\r\\n                _offerType[y] = uint8(tInfo.offerorType);\\r\\n        }\\r\\n        return (_offerTokenAddress, _offerProof, _offerType  );\\r\\n    }\\r\\n    function verifyERC721 (address from, address tokenAddress, uint256 tokenId) internal view returns (bool){\\r\\n        require(from == ERC721(tokenAddress).ownerOf{gas:100000}(tokenId), 'ERROR: ERR_NOT_OWN_ID_ERC721');\\r\\n        require( ERC721(tokenAddress).isApprovedForAll{gas:100000}( from, address(this) ) , 'ERROR: ERR_NOT_ALLOW_TO_TRANSER_ITENS_ERC721');\\r\\n        return true;\\r\\n    }\\r\\n    function verifyERC20 (address from, address tokenAddress, uint256 amount) internal view returns (bool){\\r\\n        require(amount <= IERC20(tokenAddress).balanceOf{gas:100000}(from), 'ERROR: ERR_NOT_ENOUGH_FUNDS_ERC20');\\r\\n        require(amount <= IERC20(tokenAddress).allowance{gas:100000}(from, address(this) ), 'ERROR: ERR_NOT_ALLOW_SPEND_FUNDS');\\r\\n        return true;\\r\\n    }\\r\\n    function verifyERC1155 (address from, address tokenAddress, uint256 amount, uint256 tokenId) internal view returns (bool){\\r\\n        require(tokenId > 0, 'ERROR: STAKE_ERC1155_ID_SHOULD_GREATER_THEN_0');\\r\\n        require(amount > 0 && amount <= ERC1155(tokenAddress).balanceOf{gas:100000}(from, tokenId), 'ERROR: ERR_NOT_ENOUGH_FUNDS_ERC1155');\\r\\n        require( ERC1155(tokenAddress).isApprovedForAll{gas:100000}( from, address(this) ) , 'ERROR: ERR_NOT_ALLOW_TO_TRANSER_ITENS_ERC1155');\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function verifyOfferIntegrity(address tokenAddress, uint256 tokenId,  uint256 amount, uint8 tokenType) public pure returns(bool)\\r\\n    {\\r\\n        require(tokenAddress != address(0), 'ERROR: CREATOR_CONTRACT_NOT_VALID' );\\r\\n        require(tokenType >=0 && tokenType <= uint8(OfferType.NATIVE)  , 'ERROR: NOT_VALID_OFFER_TYPE');\\r\\n        require(tokenId > 0  , 'ERROR: TOKENID_MUST_POSITIVE');\\r\\n        require(amount > 0  , 'ERROR: AMOUNT_MUST_POSITIVE');\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function offerPerUser(address u) public view returns(uint256[] memory ){\\r\\n        return (_openOffers[u]);\\r\\n    }\\r\\n\\r\\n    function removeOfferForUser(address u, uint256 offerId ) private returns(bool)\\r\\n    {\\r\\n        uint256[] memory userOffers = _openOffers[u];\\r\\n\\r\\n        if(_openOffers[u].length == 1){\\r\\n            _openOffers[u][0] = 0;\\r\\n            return true;\\r\\n        }\\r\\n        for (uint i = 0; i<userOffers.length-1; i++){\\r\\n            if(userOffers[i] == offerId ){\\r\\n                 _openOffers[u][i] = _openOffers[u][userOffers.length-1];\\r\\n                 _openOffers[u].pop();\\r\\n                return true;\\r\\n            }   \\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0ce422967b33ed1c53232e0e684f8877f2619356b80fac1ca7d13d982bea9be5\",\"license\":\"MIT\"},\"contracts/interfaces/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\ninterface IAuthority {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n\\r\\n    event GovernorPulled(address indexed from, address indexed to);\\r\\n    event GuardianPulled(address indexed from, address indexed to);\\r\\n    event PolicyPulled(address indexed from, address indexed to);\\r\\n    event VaultPulled(address indexed from, address indexed to);\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    function governor() external view returns (address);\\r\\n\\r\\n    function guardian() external view returns (address);\\r\\n\\r\\n    function policy() external view returns (address);\\r\\n\\r\\n    function vault() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x162ef81a6d172910d8817409df50dc7155f746bcd4173a9e6c844a24abd78fca\",\"license\":\"AGPL-3.0\"},\"contracts/types/AccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IAuthority.sol\\\";\\r\\n\\r\\nerror UNAUTHORIZED();\\r\\nerror AUTHORITY_INITIALIZED();\\r\\n\\r\\n/// @dev Reasoning for this contract = modifiers literaly copy code\\r\\n/// instead of pointing towards the logic to execute. Over many\\r\\n/// functions this bloats contract size unnecessarily.\\r\\n/// imho modifiers are a meme.\\r\\nabstract contract AccessControlled {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event AuthorityUpdated(IAuthority authority);\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    IAuthority public authority;\\r\\n\\r\\n    /* ========== Constructor ========== */\\r\\n\\r\\n    constructor(IAuthority _authority) {\\r\\n        authority = _authority;\\r\\n        emit AuthorityUpdated(_authority);\\r\\n    }\\r\\n\\r\\n    /* ========== \\\"MODIFIERS\\\" ========== */\\r\\n\\r\\n    modifier onlyGovernor {\\r\\n\\t_onlyGovernor();\\r\\n\\t_;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardian {\\r\\n\\t_onlyGuardian();\\r\\n\\t_;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicy {\\r\\n\\t_onlyPolicy();\\r\\n\\t_;\\r\\n    }\\r\\n\\r\\n    modifier onlyVault {\\r\\n\\t_onlyVault();\\r\\n\\t_;\\r\\n    }\\r\\n\\r\\n    /* ========== GOV ONLY ========== */\\r\\n\\r\\n    function initializeAuthority(IAuthority _newAuthority) internal {\\r\\n        if (authority != IAuthority(address(0))) revert AUTHORITY_INITIALIZED();\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    function setAuthority(IAuthority _newAuthority) external {\\r\\n        _onlyGovernor();\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL CHECKS ========== */\\r\\n\\r\\n    function _onlyGovernor() internal view {\\r\\n        if (msg.sender != authority.governor()) revert UNAUTHORIZED();\\r\\n    }\\r\\n\\r\\n    function _onlyGuardian() internal view {\\r\\n        if (msg.sender != authority.guardian()) revert UNAUTHORIZED();\\r\\n    }\\r\\n\\r\\n    function _onlyPolicy() internal view {\\r\\n        if (msg.sender != authority.policy()) revert UNAUTHORIZED();\\r\\n    }\\r\\n\\r\\n    function _onlyVault() internal view {\\r\\n        if (msg.sender != authority.vault()) revert UNAUTHORIZED();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbe21d3fcdfb682f395f50ff9b6916912ab6a806c70f460e5c16ed30baeb7374a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002679380380620026798339810160408190526200003491620000b7565b600080546001600160a01b0319166001600160a01b03831690811790915560405190815281907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a1506001600160a01b0381166200009c57600080fd5b506000600581905560068190556007819055600155620000e9565b600060208284031215620000ca57600080fd5b81516001600160a01b0381168114620000e257600080fd5b9392505050565b61258080620000f96000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80639a2bd58411610081578063bf7e214f1161005b578063bf7e214f14610205578063ef706adf14610230578063f23a6e611461024357600080fd5b80639a2bd584146101a4578063b9520ce4146101c4578063bc197c81146101e657600080fd5b80634579268a116100b25780634579268a1461014b578063553537131461016e5780637a9e5e4b1461018f57600080fd5b806301ffc9a7146100d9578063150b7a021461010157806330c722c514610138575b600080fd5b6100ec6100e7366004611cde565b610262565b60405190151581526020015b60405180910390f35b61011f61010f366004611dee565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016100f8565b6100ec610146366004611e6b565b610299565b61015e610159366004611eb3565b6103ff565b6040516100f89493929190611ecc565b61018161017c36600461209d565b6104e8565b6040519081526020016100f8565b6101a261019d3660046121ee565b61111f565b005b6101b76101b23660046121ee565b611188565b6040516100f8919061220b565b6101d76101d236600461224f565b6111f4565b6040516100f8939291906122bd565b61011f6101f4366004612354565b63bc197c8160e01b95945050505050565b600054610218906001600160a01b031681565b6040516001600160a01b0390911681526020016100f8565b6100ec61023e366004611eb3565b61150a565b61011f610251366004612402565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061029357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006001600160a01b0385166103005760405162461bcd60e51b815260206004820152602160248201527f4552524f523a2043524541544f525f434f4e54524143545f4e4f545f56414c496044820152601160fa1b60648201526084015b60405180910390fd5b600460ff831611156103545760405162461bcd60e51b815260206004820152601b60248201527f4552524f523a204e4f545f56414c49445f4f464645525f54595045000000000060448201526064016102f7565b600084116103a45760405162461bcd60e51b815260206004820152601c60248201527f4552524f523a20544f4b454e49445f4d5553545f504f5349544956450000000060448201526064016102f7565b600083116103f45760405162461bcd60e51b815260206004820152601b60248201527f4552524f523a20414d4f554e545f4d5553545f504f534954495645000000000060448201526064016102f7565b506001949350505050565b600081815260036020819052604082208054600182015460068301548594859460609490936001600160a01b039182169391169160ff909116908111156104485761044861246b565b8360040180805461045890612481565b80601f016020809104026020016040519081016040528092919081815260200182805461048490612481565b80156104d15780601f106104a6576101008083540402835291602001916104d1565b820191906000526020600020905b8154815290600101906020018083116104b457829003601f168201915b505050505090509450945094509450509193509193565b60006001600160a01b0386166105405760405162461bcd60e51b815260206004820152601a60248201527f45584543555445525f414444524553535f4e4f545f56414c494400000000000060448201526064016102f7565b88518a51148015610552575087518a51145b801561055f575086518a51145b6105ab5760405162461bcd60e51b815260206004820152601760248201527f43524541544f525f5041524d535f4c454e5f4552524f5200000000000000000060448201526064016102f7565b835185511480156105bd575082518551145b80156105ca575081518551145b6106165760405162461bcd60e51b815260206004820152601860248201527f45584543555445525f5041524d535f4c454e5f4552524f52000000000000000060448201526064016102f7565b60018054906000610626836124d2565b909155505060018054600081815260036020526040808220600281019390935582543373ffffffffffffffffffffffffffffffffffffffff199182161790935583548252812090920180549091166001600160a01b0389161790555b8a51811015610b85576106fb8b82815181106106a0576106a06124ed565b60200260200101518b83815181106106ba576106ba6124ed565b60200260200101518b84815181106106d4576106d46124ed565b60200260200101518b85815181106106ee576106ee6124ed565b6020026020010151610299565b506001888281518110610710576107106124ed565b602002602001015160ff16600481111561072c5761072c61246b565b600481111561073d5761073d61246b565b141561078657610780338c8381518110610759576107596124ed565b60200260200101518b8481518110610773576107736124ed565b602002602001015161163c565b506108aa565b600388828151811061079a5761079a6124ed565b602002602001015160ff1660048111156107b6576107b661246b565b60048111156107c7576107c761246b565b141561080a57610780338c83815181106107e3576107e36124ed565b60200260200101518c84815181106107fd576107fd6124ed565b60200260200101516117f6565b600288828151811061081e5761081e6124ed565b602002602001015160ff16600481111561083a5761083a61246b565b600481111561084b5761084b61246b565b14156108aa576108a8338c8381518110610867576108676124ed565b60200260200101518b8481518110610881576108816124ed565b60200260200101518d858151811061089b5761089b6124ed565b60200260200101516119ce565b505b60018054600090815260036020818152604080842033855290920190529020906108d5908390612503565b815460018101835560009283526020909220909101558a518b90829081106108ff576108ff6124ed565b60200260200101516003600060015481526020019081526020016000206003016000336001600160a01b03166001600160a01b0316815260200190815260200160002060010160008360016109549190612503565b815260200190815260200160002060000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555089818151811061099b5761099b6124ed565b60200260200101516003600060015481526020019081526020016000206003016000336001600160a01b03166001600160a01b0316815260200190815260200160002060010160008360016109f09190612503565b815260200190815260200160002060020181905550888181518110610a1757610a176124ed565b60200260200101516003600060015481526020019081526020016000206003016000336001600160a01b03166001600160a01b031681526020019081526020016000206001016000836001610a6c9190612503565b815260200190815260200160002060030181905550878181518110610a9357610a936124ed565b602002602001015160ff166004811115610aaf57610aaf61246b565b60018054600090815260036020818152604080842033855290920190528120820191610adc908590612503565b815260200190815260200160002060040160006101000a81548160ff02191690836004811115610b0e57610b0e61246b565b021790555060018054600090815260036020818152604080842033855290920190528120820190610b3f8484612503565b81526020810191909152604001600020600401805461ff001916610100836003811115610b6e57610b6e61246b565b021790555080610b7d816124d2565b915050610682565b5060005b855181101561107357610bf5868281518110610ba757610ba76124ed565b6020026020010151868381518110610bc157610bc16124ed565b6020026020010151868481518110610bdb57610bdb6124ed565b60200260200101518685815181106106ee576106ee6124ed565b506001838281518110610c0a57610c0a6124ed565b602002602001015160ff166004811115610c2657610c2661246b565b6004811115610c3757610c3761246b565b1415610c7357610c6d87878381518110610c5357610c536124ed565b6020026020010151868481518110610773576107736124ed565b50610d7d565b6003838281518110610c8757610c876124ed565b602002602001015160ff166004811115610ca357610ca361246b565b6004811115610cb457610cb461246b565b1415610cea57610c6d87878381518110610cd057610cd06124ed565b60200260200101518784815181106107fd576107fd6124ed565b6002838281518110610cfe57610cfe6124ed565b602002602001015160ff166004811115610d1a57610d1a61246b565b6004811115610d2b57610d2b61246b565b1415610d7d57610d7b87878381518110610d4757610d476124ed565b6020026020010151868481518110610d6157610d616124ed565b602002602001015188858151811061089b5761089b6124ed565b505b6001805460009081526003602081815260408084206001600160a01b038d1685529092019052902090610db1908390612503565b815460018101835560009283526020909220909101558551869082908110610ddb57610ddb6124ed565b60200260200101516003600060015481526020019081526020016000206003016000896001600160a01b03166001600160a01b031681526020019081526020016000206001016000836001610e309190612503565b815260200190815260200160002060000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550848181518110610e7757610e776124ed565b60200260200101516003600060015481526020019081526020016000206003016000896001600160a01b03166001600160a01b031681526020019081526020016000206001016000836001610ecc9190612503565b815260200190815260200160002060020181905550838181518110610ef357610ef36124ed565b60200260200101516003600060015481526020019081526020016000206003016000896001600160a01b03166001600160a01b031681526020019081526020016000206001016000836001610f489190612503565b815260200190815260200160002060030181905550828181518110610f6f57610f6f6124ed565b602002602001015160ff166004811115610f8b57610f8b61246b565b6001805460009081526003602081815260408084206001600160a01b038e16855290920190528120820191610fc1908590612503565b815260200190815260200160002060040160006101000a81548160ff02191690836004811115610ff357610ff361246b565b02179055506001805460009081526003602081815260408084206001600160a01b038d1685529092019052812082019061102d8484612503565b81526020810191909152604001600020600401805461ff00191661010083600381111561105c5761105c61246b565b02179055508061106b816124d2565b915050610b89565b50600180546000908152600360209081526040808320600601805460ff1916851790553380845260048352818420855481548088018355918652848620909101556001600160a01b038b16808552828520865481548089018355918752958590200194909455935490519081529192917f3a70875340d4e51f5512fc83d1c1a2eca9e850635d587e6988614dca764fe22c910160405180910390a3506001549998505050505050505050565b611127611c27565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b6001600160a01b0381166000908152600460209081526040918290208054835181840281018401909452808452606093928301828280156111e857602002820191906000526020600020905b8154815260200190600101908083116111d4575b50505050509050919050565b60008281526003602081815260408084206001600160a01b038616855292830182528084208054825181850281018501909352808352606095869586959094919391929083018282801561126757602002820191906000526020600020905b815481526020019060010190808311611253575b505050505090506000815167ffffffffffffffff81111561128a5761128a611d37565b6040519080825280602002602001820160405280156112b3578160200160208202803683370190505b5090506000825167ffffffffffffffff8111156112d2576112d2611d37565b6040519080825280602002602001820160405280156112fb578160200160208202803683370190505b5090506000835167ffffffffffffffff81111561131a5761131a611d37565b604051908082528060200260200182016040528015611343578160200160208202803683370190505b50905060005b84518110156114f95760008660030160008c6001600160a01b03166001600160a01b031681526020019081526020016000206001016000878481518110611392576113926124ed565b6020908102919091018101518252818101929092526040908101600020815160c08101835281546001600160a01b0316815260018201549381019390935260028101549183019190915260038101546060830152600480820154608084019160ff909116908111156114065761140661246b565b60048111156114175761141761246b565b81526020016004820160019054906101000a900460ff16600381111561143f5761143f61246b565b60038111156114505761145061246b565b81525050905033858381518110611469576114696124ed565b60200260200101906001600160a01b031690816001600160a01b03168152505080602001518483815181106114a0576114a06124ed565b602002602001018181525050806080015160048111156114c2576114c261246b565b8383815181106114d4576114d46124ed565b60ff9092166020928302919091019091015250806114f1816124d2565b915050611349565b509196509450925050509250925092565b60008181526003602052604081206001600682015460ff1660038111156115335761153361246b565b146115805760405162461bcd60e51b815260206004820181905260248201527f4552524f523a204f464645525f5354415455532049534e54204352454154454460448201526064016102f7565b60018101546001600160a01b03163314806115a4575080546001600160a01b031633145b6116165760405162461bcd60e51b815260206004820152602860248201527f4552524f523a2045584543555445522049534e542043524541544f52204f522060448201527f455845435554455200000000000000000000000000000000000000000000000060648201526084016102f7565b50506000908152600360208190526040909120600601805460ff19169091179055600190565b6040516370a0823160e01b81526001600160a01b038481166004830152600091908416906370a0823190620186a09060240160206040518083038187803b15801561168657600080fd5b5086fa15801561169a573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906116bf919061251b565b8211156117185760405162461bcd60e51b815260206004820152602160248201527f4552524f523a204552525f4e4f545f454e4f5547485f46554e44535f455243326044820152600360fc1b60648201526084016102f7565b604051636eb1769f60e11b81526001600160a01b03858116600483015230602483015284169063dd62ed3e90620186a09060440160206040518083038187803b15801561176457600080fd5b5086fa158015611778573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061179d919061251b565b8211156117ec5760405162461bcd60e51b815260206004820181905260248201527f4552524f523a204552525f4e4f545f414c4c4f575f5350454e445f46554e445360448201526064016102f7565b5060019392505050565b6040516331a9108f60e11b8152600481018290526000906001600160a01b03841690636352211e90620186a09060240160206040518083038187803b15801561183e57600080fd5b5086fa158015611852573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906118779190612534565b6001600160a01b0316846001600160a01b0316146118d75760405162461bcd60e51b815260206004820152601c60248201527f4552524f523a204552525f4e4f545f4f574e5f49445f4552433732310000000060448201526064016102f7565b60405163e985e9c560e01b81526001600160a01b03858116600483015230602483015284169063e985e9c590620186a09060440160206040518083038187803b15801561192357600080fd5b5086fa158015611937573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061195c9190612551565b6117ec5760405162461bcd60e51b815260206004820152602c60248201527f4552524f523a204552525f4e4f545f414c4c4f575f544f5f5452414e5345525f60448201527f4954454e535f455243373231000000000000000000000000000000000000000060648201526084016102f7565b6000808211611a455760405162461bcd60e51b815260206004820152602d60248201527f4552524f523a205354414b455f455243313135355f49445f53484f554c445f4760448201527f5245415445525f5448454e5f300000000000000000000000000000000000000060648201526084016102f7565b600083118015611ad85750604051627eeac760e11b81526001600160a01b0386811660048301526024820184905285169062fdd58e90620186a09060440160206040518083038187803b158015611a9b57600080fd5b5086fa158015611aaf573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611ad4919061251b565b8311155b611b305760405162461bcd60e51b815260206004820152602360248201527f4552524f523a204552525f4e4f545f454e4f5547485f46554e44535f4552433160448201526231353560e81b60648201526084016102f7565b60405163e985e9c560e01b81526001600160a01b03868116600483015230602483015285169063e985e9c590620186a09060440160206040518083038187803b158015611b7c57600080fd5b5086fa158015611b90573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611bb59190612551565b6103f45760405162461bcd60e51b815260206004820152602d60248201527f4552524f523a204552525f4e4f545f414c4c4f575f544f5f5452414e5345525f60448201527f4954454e535f455243313135350000000000000000000000000000000000000060648201526084016102f7565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7357600080fd5b505afa158015611c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cab9190612534565b6001600160a01b0316336001600160a01b031614611cdc5760405163075fd2b160e01b815260040160405180910390fd5b565b600060208284031215611cf057600080fd5b81356001600160e01b031981168114611d0857600080fd5b9392505050565b6001600160a01b0381168114611d2457600080fd5b50565b8035611d3281611d0f565b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611d7657611d76611d37565b604052919050565b600082601f830112611d8f57600080fd5b813567ffffffffffffffff811115611da957611da9611d37565b611dbc601f8201601f1916602001611d4d565b818152846020838601011115611dd157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611e0457600080fd5b8435611e0f81611d0f565b93506020850135611e1f81611d0f565b925060408501359150606085013567ffffffffffffffff811115611e4257600080fd5b611e4e87828801611d7e565b91505092959194509250565b803560ff81168114611d3257600080fd5b60008060008060808587031215611e8157600080fd5b8435611e8c81611d0f565b93506020850135925060408501359150611ea860608601611e5a565b905092959194509250565b600060208284031215611ec557600080fd5b5035919050565b60006001600160a01b03808716835260208187168185015260ff86166040850152608060608501528451915081608085015260005b82811015611f1d5785810182015185820160a001528101611f01565b82811115611f2f57600060a084870101525b5050601f01601f19169190910160a00195945050505050565b600067ffffffffffffffff821115611f6257611f62611d37565b5060051b60200190565b600082601f830112611f7d57600080fd5b81356020611f92611f8d83611f48565b611d4d565b82815260059290921b84018101918181019086841115611fb157600080fd5b8286015b84811015611fd5578035611fc881611d0f565b8352918301918301611fb5565b509695505050505050565b600082601f830112611ff157600080fd5b81356020612001611f8d83611f48565b82815260059290921b8401810191818101908684111561202057600080fd5b8286015b84811015611fd55780358352918301918301612024565b600082601f83011261204c57600080fd5b8135602061205c611f8d83611f48565b82815260059290921b8401810191818101908684111561207b57600080fd5b8286015b84811015611fd55761209081611e5a565b835291830191830161207f565b60008060008060008060008060006101208a8c0312156120bc57600080fd5b893567ffffffffffffffff808211156120d457600080fd5b6120e08d838e01611f6c565b9a5060208c01359150808211156120f657600080fd5b6121028d838e01611fe0565b995060408c013591508082111561211857600080fd5b6121248d838e01611fe0565b985060608c013591508082111561213a57600080fd5b6121468d838e0161203b565b975061215460808d01611d27565b965060a08c013591508082111561216a57600080fd5b6121768d838e01611f6c565b955060c08c013591508082111561218c57600080fd5b6121988d838e01611fe0565b945060e08c01359150808211156121ae57600080fd5b6121ba8d838e01611fe0565b93506101008c01359150808211156121d157600080fd5b506121de8c828d0161203b565b9150509295985092959850929598565b60006020828403121561220057600080fd5b8135611d0881611d0f565b6020808252825182820181905260009190848201906040850190845b8181101561224357835183529284019291840191600101612227565b50909695505050505050565b6000806040838503121561226257600080fd5b82359150602083013561227481611d0f565b809150509250929050565b600081518084526020808501945080840160005b838110156122b257815160ff1687529582019590820190600101612293565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b828110156122ff5781516001600160a01b0316845292840192908401906001016122da565b5050508381038285015285518082528683019183019060005b8181101561233457835183529284019291840191600101612318565b50508481036040860152612348818761227f565b98975050505050505050565b600080600080600060a0868803121561236c57600080fd5b853561237781611d0f565b9450602086013561238781611d0f565b9350604086013567ffffffffffffffff808211156123a457600080fd5b6123b089838a01611fe0565b945060608801359150808211156123c657600080fd5b6123d289838a01611fe0565b935060808801359150808211156123e857600080fd5b506123f588828901611d7e565b9150509295509295909350565b600080600080600060a0868803121561241a57600080fd5b853561242581611d0f565b9450602086013561243581611d0f565b93506040860135925060608601359150608086013567ffffffffffffffff81111561245f57600080fd5b6123f588828901611d7e565b634e487b7160e01b600052602160045260246000fd5b600181811c9082168061249557607f821691505b602082108114156124b657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156124e6576124e66124bc565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60008219821115612516576125166124bc565b500190565b60006020828403121561252d57600080fd5b5051919050565b60006020828403121561254657600080fd5b8151611d0881611d0f565b60006020828403121561256357600080fd5b81518015158114611d0857600080fdfea164736f6c6343000809000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c80639a2bd58411610081578063bf7e214f1161005b578063bf7e214f14610205578063ef706adf14610230578063f23a6e611461024357600080fd5b80639a2bd584146101a4578063b9520ce4146101c4578063bc197c81146101e657600080fd5b80634579268a116100b25780634579268a1461014b578063553537131461016e5780637a9e5e4b1461018f57600080fd5b806301ffc9a7146100d9578063150b7a021461010157806330c722c514610138575b600080fd5b6100ec6100e7366004611cde565b610262565b60405190151581526020015b60405180910390f35b61011f61010f366004611dee565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016100f8565b6100ec610146366004611e6b565b610299565b61015e610159366004611eb3565b6103ff565b6040516100f89493929190611ecc565b61018161017c36600461209d565b6104e8565b6040519081526020016100f8565b6101a261019d3660046121ee565b61111f565b005b6101b76101b23660046121ee565b611188565b6040516100f8919061220b565b6101d76101d236600461224f565b6111f4565b6040516100f8939291906122bd565b61011f6101f4366004612354565b63bc197c8160e01b95945050505050565b600054610218906001600160a01b031681565b6040516001600160a01b0390911681526020016100f8565b6100ec61023e366004611eb3565b61150a565b61011f610251366004612402565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061029357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006001600160a01b0385166103005760405162461bcd60e51b815260206004820152602160248201527f4552524f523a2043524541544f525f434f4e54524143545f4e4f545f56414c496044820152601160fa1b60648201526084015b60405180910390fd5b600460ff831611156103545760405162461bcd60e51b815260206004820152601b60248201527f4552524f523a204e4f545f56414c49445f4f464645525f54595045000000000060448201526064016102f7565b600084116103a45760405162461bcd60e51b815260206004820152601c60248201527f4552524f523a20544f4b454e49445f4d5553545f504f5349544956450000000060448201526064016102f7565b600083116103f45760405162461bcd60e51b815260206004820152601b60248201527f4552524f523a20414d4f554e545f4d5553545f504f534954495645000000000060448201526064016102f7565b506001949350505050565b600081815260036020819052604082208054600182015460068301548594859460609490936001600160a01b039182169391169160ff909116908111156104485761044861246b565b8360040180805461045890612481565b80601f016020809104026020016040519081016040528092919081815260200182805461048490612481565b80156104d15780601f106104a6576101008083540402835291602001916104d1565b820191906000526020600020905b8154815290600101906020018083116104b457829003601f168201915b505050505090509450945094509450509193509193565b60006001600160a01b0386166105405760405162461bcd60e51b815260206004820152601a60248201527f45584543555445525f414444524553535f4e4f545f56414c494400000000000060448201526064016102f7565b88518a51148015610552575087518a51145b801561055f575086518a51145b6105ab5760405162461bcd60e51b815260206004820152601760248201527f43524541544f525f5041524d535f4c454e5f4552524f5200000000000000000060448201526064016102f7565b835185511480156105bd575082518551145b80156105ca575081518551145b6106165760405162461bcd60e51b815260206004820152601860248201527f45584543555445525f5041524d535f4c454e5f4552524f52000000000000000060448201526064016102f7565b60018054906000610626836124d2565b909155505060018054600081815260036020526040808220600281019390935582543373ffffffffffffffffffffffffffffffffffffffff199182161790935583548252812090920180549091166001600160a01b0389161790555b8a51811015610b85576106fb8b82815181106106a0576106a06124ed565b60200260200101518b83815181106106ba576106ba6124ed565b60200260200101518b84815181106106d4576106d46124ed565b60200260200101518b85815181106106ee576106ee6124ed565b6020026020010151610299565b506001888281518110610710576107106124ed565b602002602001015160ff16600481111561072c5761072c61246b565b600481111561073d5761073d61246b565b141561078657610780338c8381518110610759576107596124ed565b60200260200101518b8481518110610773576107736124ed565b602002602001015161163c565b506108aa565b600388828151811061079a5761079a6124ed565b602002602001015160ff1660048111156107b6576107b661246b565b60048111156107c7576107c761246b565b141561080a57610780338c83815181106107e3576107e36124ed565b60200260200101518c84815181106107fd576107fd6124ed565b60200260200101516117f6565b600288828151811061081e5761081e6124ed565b602002602001015160ff16600481111561083a5761083a61246b565b600481111561084b5761084b61246b565b14156108aa576108a8338c8381518110610867576108676124ed565b60200260200101518b8481518110610881576108816124ed565b60200260200101518d858151811061089b5761089b6124ed565b60200260200101516119ce565b505b60018054600090815260036020818152604080842033855290920190529020906108d5908390612503565b815460018101835560009283526020909220909101558a518b90829081106108ff576108ff6124ed565b60200260200101516003600060015481526020019081526020016000206003016000336001600160a01b03166001600160a01b0316815260200190815260200160002060010160008360016109549190612503565b815260200190815260200160002060000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555089818151811061099b5761099b6124ed565b60200260200101516003600060015481526020019081526020016000206003016000336001600160a01b03166001600160a01b0316815260200190815260200160002060010160008360016109f09190612503565b815260200190815260200160002060020181905550888181518110610a1757610a176124ed565b60200260200101516003600060015481526020019081526020016000206003016000336001600160a01b03166001600160a01b031681526020019081526020016000206001016000836001610a6c9190612503565b815260200190815260200160002060030181905550878181518110610a9357610a936124ed565b602002602001015160ff166004811115610aaf57610aaf61246b565b60018054600090815260036020818152604080842033855290920190528120820191610adc908590612503565b815260200190815260200160002060040160006101000a81548160ff02191690836004811115610b0e57610b0e61246b565b021790555060018054600090815260036020818152604080842033855290920190528120820190610b3f8484612503565b81526020810191909152604001600020600401805461ff001916610100836003811115610b6e57610b6e61246b565b021790555080610b7d816124d2565b915050610682565b5060005b855181101561107357610bf5868281518110610ba757610ba76124ed565b6020026020010151868381518110610bc157610bc16124ed565b6020026020010151868481518110610bdb57610bdb6124ed565b60200260200101518685815181106106ee576106ee6124ed565b506001838281518110610c0a57610c0a6124ed565b602002602001015160ff166004811115610c2657610c2661246b565b6004811115610c3757610c3761246b565b1415610c7357610c6d87878381518110610c5357610c536124ed565b6020026020010151868481518110610773576107736124ed565b50610d7d565b6003838281518110610c8757610c876124ed565b602002602001015160ff166004811115610ca357610ca361246b565b6004811115610cb457610cb461246b565b1415610cea57610c6d87878381518110610cd057610cd06124ed565b60200260200101518784815181106107fd576107fd6124ed565b6002838281518110610cfe57610cfe6124ed565b602002602001015160ff166004811115610d1a57610d1a61246b565b6004811115610d2b57610d2b61246b565b1415610d7d57610d7b87878381518110610d4757610d476124ed565b6020026020010151868481518110610d6157610d616124ed565b602002602001015188858151811061089b5761089b6124ed565b505b6001805460009081526003602081815260408084206001600160a01b038d1685529092019052902090610db1908390612503565b815460018101835560009283526020909220909101558551869082908110610ddb57610ddb6124ed565b60200260200101516003600060015481526020019081526020016000206003016000896001600160a01b03166001600160a01b031681526020019081526020016000206001016000836001610e309190612503565b815260200190815260200160002060000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550848181518110610e7757610e776124ed565b60200260200101516003600060015481526020019081526020016000206003016000896001600160a01b03166001600160a01b031681526020019081526020016000206001016000836001610ecc9190612503565b815260200190815260200160002060020181905550838181518110610ef357610ef36124ed565b60200260200101516003600060015481526020019081526020016000206003016000896001600160a01b03166001600160a01b031681526020019081526020016000206001016000836001610f489190612503565b815260200190815260200160002060030181905550828181518110610f6f57610f6f6124ed565b602002602001015160ff166004811115610f8b57610f8b61246b565b6001805460009081526003602081815260408084206001600160a01b038e16855290920190528120820191610fc1908590612503565b815260200190815260200160002060040160006101000a81548160ff02191690836004811115610ff357610ff361246b565b02179055506001805460009081526003602081815260408084206001600160a01b038d1685529092019052812082019061102d8484612503565b81526020810191909152604001600020600401805461ff00191661010083600381111561105c5761105c61246b565b02179055508061106b816124d2565b915050610b89565b50600180546000908152600360209081526040808320600601805460ff1916851790553380845260048352818420855481548088018355918652848620909101556001600160a01b038b16808552828520865481548089018355918752958590200194909455935490519081529192917f3a70875340d4e51f5512fc83d1c1a2eca9e850635d587e6988614dca764fe22c910160405180910390a3506001549998505050505050505050565b611127611c27565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b6001600160a01b0381166000908152600460209081526040918290208054835181840281018401909452808452606093928301828280156111e857602002820191906000526020600020905b8154815260200190600101908083116111d4575b50505050509050919050565b60008281526003602081815260408084206001600160a01b038616855292830182528084208054825181850281018501909352808352606095869586959094919391929083018282801561126757602002820191906000526020600020905b815481526020019060010190808311611253575b505050505090506000815167ffffffffffffffff81111561128a5761128a611d37565b6040519080825280602002602001820160405280156112b3578160200160208202803683370190505b5090506000825167ffffffffffffffff8111156112d2576112d2611d37565b6040519080825280602002602001820160405280156112fb578160200160208202803683370190505b5090506000835167ffffffffffffffff81111561131a5761131a611d37565b604051908082528060200260200182016040528015611343578160200160208202803683370190505b50905060005b84518110156114f95760008660030160008c6001600160a01b03166001600160a01b031681526020019081526020016000206001016000878481518110611392576113926124ed565b6020908102919091018101518252818101929092526040908101600020815160c08101835281546001600160a01b0316815260018201549381019390935260028101549183019190915260038101546060830152600480820154608084019160ff909116908111156114065761140661246b565b60048111156114175761141761246b565b81526020016004820160019054906101000a900460ff16600381111561143f5761143f61246b565b60038111156114505761145061246b565b81525050905033858381518110611469576114696124ed565b60200260200101906001600160a01b031690816001600160a01b03168152505080602001518483815181106114a0576114a06124ed565b602002602001018181525050806080015160048111156114c2576114c261246b565b8383815181106114d4576114d46124ed565b60ff9092166020928302919091019091015250806114f1816124d2565b915050611349565b509196509450925050509250925092565b60008181526003602052604081206001600682015460ff1660038111156115335761153361246b565b146115805760405162461bcd60e51b815260206004820181905260248201527f4552524f523a204f464645525f5354415455532049534e54204352454154454460448201526064016102f7565b60018101546001600160a01b03163314806115a4575080546001600160a01b031633145b6116165760405162461bcd60e51b815260206004820152602860248201527f4552524f523a2045584543555445522049534e542043524541544f52204f522060448201527f455845435554455200000000000000000000000000000000000000000000000060648201526084016102f7565b50506000908152600360208190526040909120600601805460ff19169091179055600190565b6040516370a0823160e01b81526001600160a01b038481166004830152600091908416906370a0823190620186a09060240160206040518083038187803b15801561168657600080fd5b5086fa15801561169a573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906116bf919061251b565b8211156117185760405162461bcd60e51b815260206004820152602160248201527f4552524f523a204552525f4e4f545f454e4f5547485f46554e44535f455243326044820152600360fc1b60648201526084016102f7565b604051636eb1769f60e11b81526001600160a01b03858116600483015230602483015284169063dd62ed3e90620186a09060440160206040518083038187803b15801561176457600080fd5b5086fa158015611778573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061179d919061251b565b8211156117ec5760405162461bcd60e51b815260206004820181905260248201527f4552524f523a204552525f4e4f545f414c4c4f575f5350454e445f46554e445360448201526064016102f7565b5060019392505050565b6040516331a9108f60e11b8152600481018290526000906001600160a01b03841690636352211e90620186a09060240160206040518083038187803b15801561183e57600080fd5b5086fa158015611852573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906118779190612534565b6001600160a01b0316846001600160a01b0316146118d75760405162461bcd60e51b815260206004820152601c60248201527f4552524f523a204552525f4e4f545f4f574e5f49445f4552433732310000000060448201526064016102f7565b60405163e985e9c560e01b81526001600160a01b03858116600483015230602483015284169063e985e9c590620186a09060440160206040518083038187803b15801561192357600080fd5b5086fa158015611937573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061195c9190612551565b6117ec5760405162461bcd60e51b815260206004820152602c60248201527f4552524f523a204552525f4e4f545f414c4c4f575f544f5f5452414e5345525f60448201527f4954454e535f455243373231000000000000000000000000000000000000000060648201526084016102f7565b6000808211611a455760405162461bcd60e51b815260206004820152602d60248201527f4552524f523a205354414b455f455243313135355f49445f53484f554c445f4760448201527f5245415445525f5448454e5f300000000000000000000000000000000000000060648201526084016102f7565b600083118015611ad85750604051627eeac760e11b81526001600160a01b0386811660048301526024820184905285169062fdd58e90620186a09060440160206040518083038187803b158015611a9b57600080fd5b5086fa158015611aaf573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611ad4919061251b565b8311155b611b305760405162461bcd60e51b815260206004820152602360248201527f4552524f523a204552525f4e4f545f454e4f5547485f46554e44535f4552433160448201526231353560e81b60648201526084016102f7565b60405163e985e9c560e01b81526001600160a01b03868116600483015230602483015285169063e985e9c590620186a09060440160206040518083038187803b158015611b7c57600080fd5b5086fa158015611b90573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611bb59190612551565b6103f45760405162461bcd60e51b815260206004820152602d60248201527f4552524f523a204552525f4e4f545f414c4c4f575f544f5f5452414e5345525f60448201527f4954454e535f455243313135350000000000000000000000000000000000000060648201526084016102f7565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7357600080fd5b505afa158015611c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cab9190612534565b6001600160a01b0316336001600160a01b031614611cdc5760405163075fd2b160e01b815260040160405180910390fd5b565b600060208284031215611cf057600080fd5b81356001600160e01b031981168114611d0857600080fd5b9392505050565b6001600160a01b0381168114611d2457600080fd5b50565b8035611d3281611d0f565b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611d7657611d76611d37565b604052919050565b600082601f830112611d8f57600080fd5b813567ffffffffffffffff811115611da957611da9611d37565b611dbc601f8201601f1916602001611d4d565b818152846020838601011115611dd157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611e0457600080fd5b8435611e0f81611d0f565b93506020850135611e1f81611d0f565b925060408501359150606085013567ffffffffffffffff811115611e4257600080fd5b611e4e87828801611d7e565b91505092959194509250565b803560ff81168114611d3257600080fd5b60008060008060808587031215611e8157600080fd5b8435611e8c81611d0f565b93506020850135925060408501359150611ea860608601611e5a565b905092959194509250565b600060208284031215611ec557600080fd5b5035919050565b60006001600160a01b03808716835260208187168185015260ff86166040850152608060608501528451915081608085015260005b82811015611f1d5785810182015185820160a001528101611f01565b82811115611f2f57600060a084870101525b5050601f01601f19169190910160a00195945050505050565b600067ffffffffffffffff821115611f6257611f62611d37565b5060051b60200190565b600082601f830112611f7d57600080fd5b81356020611f92611f8d83611f48565b611d4d565b82815260059290921b84018101918181019086841115611fb157600080fd5b8286015b84811015611fd5578035611fc881611d0f565b8352918301918301611fb5565b509695505050505050565b600082601f830112611ff157600080fd5b81356020612001611f8d83611f48565b82815260059290921b8401810191818101908684111561202057600080fd5b8286015b84811015611fd55780358352918301918301612024565b600082601f83011261204c57600080fd5b8135602061205c611f8d83611f48565b82815260059290921b8401810191818101908684111561207b57600080fd5b8286015b84811015611fd55761209081611e5a565b835291830191830161207f565b60008060008060008060008060006101208a8c0312156120bc57600080fd5b893567ffffffffffffffff808211156120d457600080fd5b6120e08d838e01611f6c565b9a5060208c01359150808211156120f657600080fd5b6121028d838e01611fe0565b995060408c013591508082111561211857600080fd5b6121248d838e01611fe0565b985060608c013591508082111561213a57600080fd5b6121468d838e0161203b565b975061215460808d01611d27565b965060a08c013591508082111561216a57600080fd5b6121768d838e01611f6c565b955060c08c013591508082111561218c57600080fd5b6121988d838e01611fe0565b945060e08c01359150808211156121ae57600080fd5b6121ba8d838e01611fe0565b93506101008c01359150808211156121d157600080fd5b506121de8c828d0161203b565b9150509295985092959850929598565b60006020828403121561220057600080fd5b8135611d0881611d0f565b6020808252825182820181905260009190848201906040850190845b8181101561224357835183529284019291840191600101612227565b50909695505050505050565b6000806040838503121561226257600080fd5b82359150602083013561227481611d0f565b809150509250929050565b600081518084526020808501945080840160005b838110156122b257815160ff1687529582019590820190600101612293565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b828110156122ff5781516001600160a01b0316845292840192908401906001016122da565b5050508381038285015285518082528683019183019060005b8181101561233457835183529284019291840191600101612318565b50508481036040860152612348818761227f565b98975050505050505050565b600080600080600060a0868803121561236c57600080fd5b853561237781611d0f565b9450602086013561238781611d0f565b9350604086013567ffffffffffffffff808211156123a457600080fd5b6123b089838a01611fe0565b945060608801359150808211156123c657600080fd5b6123d289838a01611fe0565b935060808801359150808211156123e857600080fd5b506123f588828901611d7e565b9150509295509295909350565b600080600080600060a0868803121561241a57600080fd5b853561242581611d0f565b9450602086013561243581611d0f565b93506040860135925060608601359150608086013567ffffffffffffffff81111561245f57600080fd5b6123f588828901611d7e565b634e487b7160e01b600052602160045260246000fd5b600181811c9082168061249557607f821691505b602082108114156124b657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156124e6576124e66124bc565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60008219821115612516576125166124bc565b500190565b60006020828403121561252d57600080fd5b5051919050565b60006020828403121561254657600080fd5b8151611d0881611d0f565b60006020828403121561256357600080fd5b81518015158114611d0857600080fdfea164736f6c6343000809000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5454,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "authority",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAuthority)5421"
      },
      {
        "astId": 4188,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_offerId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4190,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 4195,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_transactions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Offer)4256_storage)"
      },
      {
        "astId": 4200,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_openOffers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4202,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_openOfferAcc",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4204,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_totalOfferCompletedAcc",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4206,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_totalOfferClaimAcc",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAuthority)5421": {
        "encoding": "inplace",
        "label": "contract IAuthority",
        "numberOfBytes": "20"
      },
      "t_enum(OfferStatus)4211": {
        "encoding": "inplace",
        "label": "enum Escrow.OfferStatus",
        "numberOfBytes": "1"
      },
      "t_enum(OfferType)4222": {
        "encoding": "inplace",
        "label": "enum Escrow.OfferType",
        "numberOfBytes": "1"
      },
      "t_enum(UserStatus)4216": {
        "encoding": "inplace",
        "label": "enum Escrow.UserStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_struct(OfferUser)4265_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Escrow.OfferUser)",
        "numberOfBytes": "32",
        "value": "t_struct(OfferUser)4265_storage"
      },
      "t_mapping(t_uint256,t_struct(Offer)4256_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Escrow.Offer)",
        "numberOfBytes": "32",
        "value": "t_struct(Offer)4256_storage"
      },
      "t_mapping(t_uint256,t_struct(OfferCounterpart)4237_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Escrow.OfferCounterpart)",
        "numberOfBytes": "32",
        "value": "t_struct(OfferCounterpart)4237_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Offer)4256_storage": {
        "encoding": "inplace",
        "label": "struct Escrow.Offer",
        "members": [
          {
            "astId": 4239,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4241,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "executor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4243,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4248,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "_offerors",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(OfferUser)4265_storage)"
          },
          {
            "astId": 4250,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "file",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 4252,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "description",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 4255,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "offerStatus",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(OfferStatus)4211"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(OfferCounterpart)4237_storage": {
        "encoding": "inplace",
        "label": "struct Escrow.OfferCounterpart",
        "members": [
          {
            "astId": 4224,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "contractAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4226,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "proof",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 4228,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "idAsset",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4230,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4233,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "offerorType",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(OfferType)4222"
          },
          {
            "astId": 4236,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "offerorStatus",
            "offset": 1,
            "slot": "4",
            "type": "t_enum(UserStatus)4216"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(OfferUser)4265_storage": {
        "encoding": "inplace",
        "label": "struct Escrow.OfferUser",
        "members": [
          {
            "astId": 4259,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "tokenAddressIdx",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4264,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "_counterpart",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(OfferCounterpart)4237_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}